{"version":3,"sources":["components/WeatherIcon.js","components/SmallCards/SmallCard.js","components/SmallCards/SmallCardList.js","components/WeatherCard.js","components/WeatherForm.js","components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherIcon","icon","size","SmallCard","city","cityClicked","removeCity","API_URL","apiKey","process","useState","name","setName","temp","setTemp","setIcon","useEffect","a","fetch","res","json","data","main","weather","fetchData","className","onClick","SmallCardList","cityList","map","WeatherCard","description","WeatherForm","submitHandler","inputValue","setInputValue","onSubmit","type","value","placeholder","onChange","e","target","firstCity","Weather","JSON","parse","localStorage","getItem","setCity","cityOnCard","setCityOnCard","setDescription","setCityList","console","log","fetchAPI","updateData","setItem","stringify","filter","preventDefault","indexOf","length","preCityList","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d931c066.chunk.js","sourcesContent":["import {\r\n  WiCloudy,\r\n  WiDayCloudy,\r\n  WiDayCloudyHigh,\r\n  WiDayLightWind,\r\n  WiDayRain,\r\n  WiDayShowers,\r\n  WiDaySnowThunderstorm,\r\n  WiDaySunny,\r\n  WiNightAltCloudy,\r\n  WiNightAltThunderstorm,\r\n  WiNightClear,\r\n  WiNightPartlyCloudy,\r\n  WiNightRain,\r\n  WiNightShowers,\r\n  WiStrongWind,\r\n} from 'react-icons/wi';\r\n\r\nconst WeatherIcon = ({ icon, size }) => {\r\n  switch (icon) {\r\n    case '01d':\r\n      return <WiDaySunny size={size} />;\r\n    case '01n':\r\n      return <WiNightClear size={size} />;\r\n    case '02d':\r\n      return <WiDayCloudy size={size} />;\r\n    case '02n':\r\n      return <WiNightPartlyCloudy size={size} />;\r\n    case '03d':\r\n      return <WiDayCloudyHigh size={size} />;\r\n    case '03n':\r\n      return <WiNightAltCloudy size={size} />;\r\n    case '04d':\r\n      return <WiCloudy size={size} />;\r\n    case '04n':\r\n      return <WiCloudy size={size} />;\r\n    case '09d':\r\n      return <WiDayShowers size={size} />;\r\n    case '09n':\r\n      return <WiNightShowers size={size} />;\r\n    case '10d':\r\n      return <WiDayRain size={size} />;\r\n    case '10n':\r\n      return <WiNightRain size={size} />;\r\n    case '11d':\r\n      return <WiDaySnowThunderstorm size={size} />;\r\n    case '11n':\r\n      return <WiNightAltThunderstorm size={size} />;\r\n    case '50d':\r\n      return <WiDayLightWind size={size} />;\r\n    case '50n':\r\n      return <WiStrongWind />;\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nexport default WeatherIcon;\r\n","import { useState, useEffect } from 'react';\r\nimport WeatherIcon from '../WeatherIcon';\r\nimport { IoCloseCircle } from 'react-icons/io5';\r\n\r\nconst SmallCard = ({ city, cityClicked, removeCity }) => {\r\n  const API_URL = 'http://api.openweathermap.org/data/2.5/weather?q=';\r\n  const apiKey = process.env.REACT_APP_WEATHER_API_KEY;\r\n  const [name, setName] = useState('');\r\n  const [temp, setTemp] = useState('');\r\n  const [icon, setIcon] = useState('');\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const res = await fetch(\r\n        `${API_URL}${city}&appid=${apiKey}&units=metric&lang=fa`\r\n      );\r\n      const data = await res.json();\r\n      if (data.main) {\r\n        setName(data.name);\r\n        setTemp(data.main.temp);\r\n        setIcon(data.weather[0].icon);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, [city, apiKey]);\r\n\r\n  return (\r\n    <div className='relative'>\r\n      <span\r\n        onClick={() => removeCity(city)}\r\n        className='absolute -top-2 -right-2 text-red-600 text-4xl cursor-pointer'\r\n      >\r\n        <IoCloseCircle />\r\n      </span>\r\n      <div\r\n        onClick={() => cityClicked(city)}\r\n        className='bg-white border-blue-400 dark:bg-gray-800 bg-opacity-60 border-opacity-60 | p-2 border-solid rounded-3xl border | flex justify-around cursor-pointer | hover:bg-blue-200 dark:hover:bg-indigo-600 hover:border-blue-600 | transition-colors duration-500'\r\n      >\r\n        <div className='pt-2'>\r\n          <WeatherIcon\r\n            className='w-16 h-16 object-cover'\r\n            size='55px'\r\n            icon={icon}\r\n          />\r\n        </div>\r\n        <div className='flex flex-col justify-center'>\r\n          <p className='text-gray-900 dark:text-gray-300 font-semibold'>\r\n            {name}\r\n          </p>\r\n          <p className='text-black dark:text-gray-100 text-justify font-semibold'>\r\n            {temp}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SmallCard;\r\n","import SmallCard from './SmallCard';\r\n\r\nconst SmallCardList = ({ cityList, cityClicked, removeCity }) => {\r\n  return (\r\n    <div className='h-auto hidden dark:bg-gray-900 px-44 md:flex flex-col justify-center sm:py-12'>\r\n      <div className='grid lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2 grid-cols-1 gap-4'>\r\n        {cityList.map(city => (\r\n          <SmallCard\r\n            key={city}\r\n            city={city}\r\n            cityClicked={cityClicked}\r\n            removeCity={removeCity}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SmallCardList;\r\n","import WeatherIcon from './WeatherIcon';\r\n\r\nconst WeatherCard = ({ icon, city, description, temp }) => {\r\n  return (\r\n    <div className='absolute w-80 border border-green-600 bg-gradient-to-b from-blue-100 via-white to-green-50 rounded-3xl flex flex-col justify-center items-center text-center p-6 bg-white'>\r\n      <div className='text-md font-bold flex flex-col text-gray-900'>\r\n        <span className='text-2xl'>{city}</span>\r\n      </div>\r\n      <div className='w-32 h-32 flex items-center justify-center'>\r\n        <WeatherIcon size='150px' icon={icon} />\r\n      </div>\r\n      <p className='text-gray-700 mb-2'>{description}</p>\r\n      <p className='mx-1 text-4xl font-bold mb-3'>{temp}º</p>\r\n      <div className='flex justify-between w-full'>\r\n        <div className='flex items-center text-gray-700 px-2'>\r\n          <h1>svg here</h1>\r\n          100 l/m<sup>2</sup>\r\n        </div>\r\n        <div className='flex items-center text-gray-700 px-2'>\r\n          <h1>icon here</h1>\r\n          20 km/h\r\n        </div>\r\n      </div>\r\n      ;\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherCard;\r\n","const WeatherForm = ({ submitHandler, inputValue, setInputValue }) => {\r\n  return (\r\n    <div className=' my-5 block m-auto text-center px-36'>\r\n      <form onSubmit={submitHandler}>\r\n        <input\r\n          type='text'\r\n          value={inputValue}\r\n          placeholder='نام شهر را وارد کنید'\r\n          onChange={e => setInputValue(e.target.value)}\r\n          className='text-right py-3 px-16 border border-green-600 rounded-full outline-none |  hover:border-blue-300 | transition duration-200'\r\n        />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherForm;\r\n","import { useState, useEffect } from 'react';\r\nimport SmallCardList from './SmallCards/SmallCardList';\r\nimport WeatherCard from './WeatherCard';\r\nimport WeatherForm from './WeatherForm';\r\n\r\nconst API_URL = 'http://api.openweathermap.org/data/2.5/weather?q=';\r\nconst apiKey = process.env.REACT_APP_WEATHER_API_KEY;\r\nconst firstCity = 'tehran';\r\n\r\nfunction Weather() {\r\n  const [city, setCity] = useState(\r\n    JSON.parse(localStorage.getItem('selectedCity')) || 'تهران'\r\n  );\r\n  const [cityOnCard, setCityOnCard] = useState('');\r\n  const [temp, setTemp] = useState(null);\r\n  const [description, setDescription] = useState('');\r\n  const [icon, setIcon] = useState(null);\r\n  const [cityList, setCityList] = useState(\r\n    JSON.parse(localStorage.getItem('cityList')) || []\r\n  );\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  useEffect(() => {\r\n    async function fetchAPI() {\r\n      const res = await fetch(\r\n        `${API_URL}${firstCity}&appid=${apiKey}&units=metric&lang=fa`\r\n      );\r\n      const newData = await res.json();\r\n      if (!newData) {\r\n        console.log('no data');\r\n      }\r\n    }\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    async function updateData() {\r\n      const res = await fetch(\r\n        `${API_URL}${city}&appid=${apiKey}&units=metric&lang=fa`\r\n      );\r\n      const data = await res.json();\r\n      if (data.main) {\r\n        setCityOnCard(data.name);\r\n        setTemp(data.main.temp);\r\n        setDescription(data.weather[0].description);\r\n        setIcon(data.weather[0].icon);\r\n      }\r\n      return;\r\n    }\r\n    updateData();\r\n  }, [city]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('cityList', JSON.stringify(cityList));\r\n  }, [cityList]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('selectedCity', JSON.stringify(city));\r\n  }, [city]);\r\n\r\n  const submitHandler = e => {\r\n    e.preventDefault();\r\n    setCity(inputValue);\r\n\r\n    if (cityList.indexOf(inputValue) === -1 && inputValue.length > 0) {\r\n      setCityList(preCityList => [...preCityList, inputValue]);\r\n    }\r\n    // if (city && temp) {\r\n    //   setCityList(preCityList => [...preCityList, inputValue]);\r\n    // }\r\n\r\n    setInputValue('');\r\n  };\r\n\r\n  const cityClicked = e => {\r\n    setCity(e);\r\n  };\r\n\r\n  const removeCity = e => {\r\n    setCityList(cityList.filter(city => e !== city));\r\n  };\r\n\r\n  return (\r\n    <div className='min-h-screen bg-gradient-to-b from-blue-200 via-white  to-green-200'>\r\n      {cityList && (\r\n        <SmallCardList\r\n          cityList={cityList}\r\n          cityClicked={cityClicked}\r\n          removeCity={removeCity}\r\n        />\r\n      )}\r\n\r\n      <WeatherForm\r\n        submitHandler={submitHandler}\r\n        setInputValue={setInputValue}\r\n        inputValue={inputValue}\r\n      />\r\n      <div className='flex justify-center'>\r\n        {cityOnCard && (\r\n          <WeatherCard\r\n            icon={icon}\r\n            city={cityOnCard}\r\n            temp={temp}\r\n            description={description}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Weather;\r\n","import Weather from './components/Weather';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}